{"abi":[{"type":"error","name":"R","inputs":[]},{"type":"error","name":"T","inputs":[]}],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b2c1572233c89aba0e69581b59f4ce8cc577f63d4786538a64b1f416fc83c43464736f6c63430008180033","sourceMap":"305:9112:84:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;305:9112:84;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b2c1572233c89aba0e69581b59f4ce8cc577f63d4786538a64b1f416fc83c43464736f6c63430008180033","sourceMap":"305:9112:84:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"R\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"T\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/lib/uniswapV3/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/test/=lib/foundry-random/lib/prb-test/src/\",\":CramBit/=lib/foundry-random/lib/CramBit/\",\":chainlink-brownie-contracts/=lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":crambit/=lib/foundry-random/lib/CramBit/src/\",\":ds-test/=lib/foundry-random/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-chainlink-toolkit/=lib/foundry-chainlink-toolkit/\",\":foundry-random/=lib/foundry-random/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":prb-test/=lib/foundry-random/lib/prb-test/src/\",\":solidity-bytes-utils/=lib/foundry-random/lib/solidity-bytes-utils/contracts/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":src/=src/\"]},\"sources\":{\"src/lib/uniswapV3/TickMath.sol\":{\"keccak256\":\"0x2adb8fb790220ae9096d222f6e97b2ae88648f6cbcda56f7564dd835ca2cbb1f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://c34b53ff4d544351113e1597cf4d7a68c12736e75ef718fbbd9fcf8099f756e1\",\"dweb:/ipfs/QmT2Pc6kXEy2QpEHv3jnezh45QR7XnvMcSKhCatw5frbDF\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"R"},{"inputs":[],"type":"error","name":"T"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@chainlink/contracts/=lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@prb/test/=lib/foundry-random/lib/prb-test/src/","CramBit/=lib/foundry-random/lib/CramBit/","chainlink-brownie-contracts/=lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/","crambit/=lib/foundry-random/lib/CramBit/src/","ds-test/=lib/foundry-random/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","foundry-chainlink-toolkit/=lib/foundry-chainlink-toolkit/","foundry-random/=lib/foundry-random/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/","prb-test/=lib/foundry-random/lib/prb-test/src/","solidity-bytes-utils/=lib/foundry-random/lib/solidity-bytes-utils/contracts/","solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/","src/=src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/lib/uniswapV3/TickMath.sol":"TickMath"},"evmVersion":"paris","libraries":{}},"sources":{"src/lib/uniswapV3/TickMath.sol":{"keccak256":"0x2adb8fb790220ae9096d222f6e97b2ae88648f6cbcda56f7564dd835ca2cbb1f","urls":["bzz-raw://c34b53ff4d544351113e1597cf4d7a68c12736e75ef718fbbd9fcf8099f756e1","dweb:/ipfs/QmT2Pc6kXEy2QpEHv3jnezh45QR7XnvMcSKhCatw5frbDF"],"license":"GPL-2.0-or-later"}},"version":1},"id":84}